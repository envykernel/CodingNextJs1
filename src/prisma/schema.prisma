generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String        @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  organisationId    Int?
  organisation      organisation? @relation(fields: [organisationId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  organisationId Int?
  accounts       Account[]
  sessions       Session[]
  organisation   organisation? @relation(fields: [organisationId], references: [id])
  archived_invoices invoice[] @relation("ArchivedBy")
  deleted_invoices  invoice[] @relation("DeletedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model patient {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(100)
  birthdate               DateTime                  @db.Date
  gender                  String                    @db.VarChar(20)
  doctor_id               Int?
  status                  String?                   @db.VarChar(50)
  avatar                  String?                   @db.VarChar(255)
  address                 String?                   @db.VarChar(255)
  city                    String?                   @db.VarChar(100)
  phone_number            String?                   @db.VarChar(30)
  email                   String?                   @db.VarChar(100)
  emergency_contact_name  String?                   @db.VarChar(100)
  emergency_contact_phone String?                   @db.VarChar(30)
  emergency_contact_email String?                   @db.VarChar(100)
  created_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  organisation_id         Int
  invoices                invoice[]
  lab_test_orders         lab_test_order[]
  doctor                  doctor?                   @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organisation            organisation              @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient_appointments    patient_appointment[]     @relation("patient_appointment_patient_id")
  patient_measurements    patient_measurements[]
  patient_medical         patient_medical[]
  patient_medical_history patient_medical_history[]
  patient_visits          patient_visit[]
  payments                payment[]
  prescriptions           prescription[]
  radiology_orders        radiology_order[]

  @@index([organisation_id], map: "idx_patient_organisation_id")
  @@index([doctor_id], map: "idx_patient_doctor_id")
}

model patient_measurements {
  id                       Int            @id @default(autoincrement())
  patient_id               Int
  measured_at              DateTime?      @default(now()) @db.Timestamptz(6)
  weight_kg                Float?
  height_cm                Float?
  temperature_c            Float?
  blood_pressure_systolic  Int?
  blood_pressure_diastolic Int?
  organisation_id          Int
  location                 String?        @db.VarChar(50)
  measurement_type         String?        @default("routine") @db.VarChar(50)
  notes                    String?
  oxygen_saturation        Float?
  pulse                    Int?
  respiratory_rate         Int?
  taken_by                 String?        @db.VarChar(100)
  visit_id                 Int?           @unique
  organisation             organisation   @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  patient                  patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  visit                    patient_visit? @relation(fields: [visit_id], references: [id], onDelete: Cascade)

  @@index([patient_id])
  @@index([visit_id])
  @@index([organisation_id])
  @@index([measured_at])
}

model patient_medical {
  id              Int          @id @default(autoincrement())
  patient_id      Int
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?    @default(now()) @db.Timestamptz(6)
  organisation_id Int
  organisation    organisation @relation(fields: [organisation_id], references: [id])
  patient         patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([organisation_id], map: "idx_patient_medical_organisation_id")
}

model patient_medical_history {
  id              Int          @id @default(autoincrement())
  patient_id      Int
  history_type    String?      @db.VarChar(100)
  description     String
  date_occurred   DateTime?    @db.Date
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  organisation_id Int
  organisation    organisation @relation(fields: [organisation_id], references: [id])
  patient         patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([organisation_id], map: "idx_patient_medical_history_organisation_id")
}

model doctor {
  id                  Int                   @id @default(autoincrement())
  organisation_id     Int
  name                String                @db.VarChar(255)
  specialty           String?               @db.VarChar(100)
  phone_number        String?               @db.VarChar(50)
  email               String?               @db.VarChar(255)
  status              String?               @default("enabled") @db.VarChar(50)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  userId              Int?                  @unique
  user                UserInternal?         @relation(fields: [userId], references: [id])
  clinical_exams      clinical_exam[]
  organisation        organisation          @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lab_test_orders     lab_test_order[]
  patients            patient[]
  patient_appointment patient_appointment[]
  patient_visits      patient_visit[]
  prescriptions       prescription[]
  radiology_orders    radiology_order[]

  @@index([organisation_id], map: "idx_doctor_organisation_id")
  @@index([userId], map: "idx_doctor_user_id")
}

model organisation {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  address                 String?
  phone_number            String?                   @db.VarChar(50)
  email                   String?                   @db.VarChar(255)
  status                  String?                   @default("enabled") @db.VarChar(50)
  currency                String?                   @default("MAD") @db.VarChar(3)
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  break_end_time          String?                   @db.VarChar(5)
  break_start_time        String?                   @db.VarChar(5)
  work_end_time           String?                   @db.VarChar(5)
  work_start_time         String?                   @db.VarChar(5)
  working_days            String[]                  @db.VarChar(20)
  accounts                Account[]
  users                   User[]
  userInternals           UserInternal[]
  clinical_exams          clinical_exam[]
  doctor                  doctor[]
  invoices                invoice[]
  invoice_lines           invoice_line[]
  lab_test_orders         lab_test_order[]
  medications             medication[]
  patient                 patient[]
  patient_appointment     patient_appointment[]
  patient_measurements    patient_measurements[]
  patient_medical         patient_medical[]
  patient_medical_history patient_medical_history[]
  patient_visits          patient_visit[]
  payments                payment[]
  payment_applications    payment_application[]
  prescriptions           prescription[]
  services                service[]
  radiology_orders        radiology_order[]
  notifications           Notification[]
  contacts                Contact[]
}

model patient_appointment {
  id               Int             @id @default(autoincrement())
  organisation_id  Int
  patient_id       Int
  doctor_id        Int?
  appointment_date DateTime        @db.Timestamp(6)
  appointment_type String?         @db.VarChar(100)
  status           String?         @default("scheduled") @db.VarChar(50)
  notes            String?
  place            String?         @db.VarChar(100)
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  updated_at       DateTime?       @default(now()) @db.Timestamp(6)
  doctor           doctor?         @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organisation     organisation    @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient          patient         @relation("patient_appointment_patient_id", fields: [patient_id], references: [id], onDelete: Cascade)
  patient_visits   patient_visit[]

  @@index([doctor_id], map: "idx_patient_appointment_doctor_id")
  @@index([organisation_id], map: "idx_patient_appointment_organisation_id")
  @@index([patient_id], map: "idx_patient_appointment_patient_id")
}

model UserInternal {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  isApproved     Boolean       @default(false)
  organisationId Int?
  role           UserRole?     // Make role optional by adding ?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisation   organisation? @relation(fields: [organisationId], references: [id])
  doctor         doctor?       // Simple relation without fields
  shortcuts      UserShortcut[]
  notifications  NotificationRead[]
  contacts       Contact[]
}

model patient_visit {
  id                  Int                   @id @default(autoincrement())
  appointment_id      Int?
  patient_id          Int
  doctor_id           Int?
  organisation_id     Int
  visit_date          DateTime              @db.Date
  start_time          String                @db.VarChar(5)  // Format: "HH:mm"
  end_time            String                @db.VarChar(5)  // Format: "HH:mm"
  status              String                @default("scheduled") // possible values: scheduled, in_progress, completed, cancelled, no_show
  notes               String?
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  clinical_exams      clinical_exam[]
  invoices            invoice[]
  lab_test_orders     lab_test_order[]
  patient_measurement patient_measurements?
  appointment         patient_appointment?  @relation(fields: [appointment_id], references: [id])
  doctor              doctor?               @relation(fields: [doctor_id], references: [id])
  organisation        organisation          @relation(fields: [organisation_id], references: [id])
  patient             patient               @relation(fields: [patient_id], references: [id])
  prescriptions       prescription[]
  radiology_orders    radiology_order[]

  @@index([patient_id])
  @@index([doctor_id])
  @@index([organisation_id])
}

model clinical_exam {
  id                 Int           @id @default(autoincrement())
  visit_id           Int
  organisation_id    Int
  examiner_id        Int?
  chief_complaint    String?       @db.VarChar(1000)
  history_illness    String?       @db.VarChar(2000)
  medical_history    String?       @db.VarChar(2000)
  general_appearance String?       @db.VarChar(500)
  cardiovascular     String?       @db.VarChar(1000)
  respiratory        String?       @db.VarChar(1000)
  gastrointestinal   String?       @db.VarChar(1000)
  neurological       String?       @db.VarChar(1000)
  musculoskeletal    String?       @db.VarChar(1000)
  skin               String?       @db.VarChar(1000)
  ent                String?       @db.VarChar(1000)
  assessment         String?       @db.VarChar(2000)
  plan               String?       @db.VarChar(2000)
  created_at         DateTime?     @default(now()) @db.Timestamp(6)
  updated_at         DateTime?     @default(now()) @db.Timestamp(6)
  examiner           doctor?       @relation(fields: [examiner_id], references: [id])
  organisation       organisation  @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  visit              patient_visit @relation(fields: [visit_id], references: [id], onDelete: Cascade)

  @@index([visit_id])
  @@index([organisation_id])
  @@index([examiner_id])
}

model prescription {
  id              Int                 @id @default(autoincrement())
  visit_id        Int
  doctor_id       Int
  organisation_id Int
  patient_id      Int
  created_at      DateTime?           @default(now()) @db.Timestamp(6)
  updated_at      DateTime?           @default(now()) @db.Timestamp(6)
  notes           String?             @db.VarChar(1000)
  doctor          doctor              @relation(fields: [doctor_id], references: [id])
  organisation    organisation        @relation(fields: [organisation_id], references: [id])
  patient         patient             @relation(fields: [patient_id], references: [id])
  visit           patient_visit       @relation(fields: [visit_id], references: [id], onDelete: Cascade)
  lines           prescription_line[]

  @@index([visit_id])
  @@index([doctor_id])
  @@index([organisation_id])
  @@index([patient_id])
}

model prescription_line {
  id              Int          @id @default(autoincrement())
  prescription_id Int
  drug_name       String       @db.VarChar(255)
  dosage          String?      @db.VarChar(255)
  frequency       String?      @db.VarChar(255)
  duration        String?      @db.VarChar(255)
  instructions    String?      @db.VarChar(1000)
  prescription    prescription @relation(fields: [prescription_id], references: [id], onDelete: Cascade)

  @@index([prescription_id])
}

model medication {
  id              Int           @id @default(autoincrement())
  name            String        @unique @db.VarChar(255)
  category        String?       @db.VarChar(100)
  organisation_id Int?
  dosages         String[]      @db.VarChar(100)
  organisation    organisation? @relation(fields: [organisation_id], references: [id], onDelete: Cascade)

  @@index([organisation_id])
}

model lab_test_type {
  id                      Int              @id @default(autoincrement())
  name                    String           @unique @db.VarChar(255)
  category                String?          @db.VarChar(100)
  default_unit            String?          @db.VarChar(50)
  default_reference_range String?          @db.VarChar(100)
  created_at              DateTime?        @default(now()) @db.Timestamp(6)
  updated_at              DateTime?        @default(now()) @db.Timestamp(6)
  lab_test_orders         lab_test_order[]
}

model lab_test_order {
  id              Int            @id @default(autoincrement())
  patient_id      Int
  visit_id        Int?
  doctor_id       Int?
  test_type_id    Int
  organisation_id Int
  ordered_at      DateTime?      @default(now()) @db.Timestamp(6)
  result_value    String?        @db.VarChar(100)
  result_unit     String?        @db.VarChar(50)
  reference_range String?        @db.VarChar(100)
  status          String?        @default("pending") @db.VarChar(50)
  notes           String?
  result_flag     String?        @db.VarChar(20)
  doctor          doctor?        @relation(fields: [doctor_id], references: [id])
  organisation    organisation   @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  patient         patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  test_type       lab_test_type  @relation(fields: [test_type_id], references: [id])
  visit           patient_visit? @relation(fields: [visit_id], references: [id])

  @@index([patient_id])
  @@index([visit_id])
  @@index([doctor_id])
  @@index([test_type_id])
  @@index([organisation_id])
}

// Modèle simplifié pour le référentiel des examens radiologiques
model radiology_exam_type {
  id               Int                 @id @default(autoincrement())
  name             String              @unique @db.VarChar(255)
  category         String?             @db.VarChar(100) // "Radiographie", "Scanner", "IRM", etc.
  description      String?
  notes            String?             // Remarques générales sur l'examen
  created_at       DateTime?           @default(now()) @db.Timestamp(6)
  updated_at       DateTime?           @default(now()) @db.Timestamp(6)
  radiology_orders radiology_order[]

  @@index([category])
}

// Modèle simplifié pour les demandes d'examens radiologiques
model radiology_order {
  id               Int               @id @default(autoincrement())
  patient_id       Int
  visit_id         Int?
  doctor_id        Int?
  exam_type_id     Int
  organisation_id  Int
  ordered_at       String?           @default(dbgenerated("CURRENT_TIMESTAMP::text")) @db.VarChar(50)
  status           String?           @default("pending") @db.VarChar(50) // "pending", "completed", "cancelled"
  notes            String?           // Notes spécifiques pour cette demande
  result           String?           // Résultat ou conclusion de l'examen
  result_date      String?           @db.VarChar(50) // Date du résultat
  
  // Relations
  doctor           doctor?           @relation(fields: [doctor_id], references: [id])
  organisation     organisation      @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  patient          patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  exam_type        radiology_exam_type @relation(fields: [exam_type_id], references: [id])
  visit            patient_visit?    @relation(fields: [visit_id], references: [id])

  // Index
  @@index([patient_id])
  @@index([visit_id])
  @@index([doctor_id])
  @@index([exam_type_id])
  @@index([organisation_id])
  @@index([status])
}

model service {
  id              Int            @id @default(autoincrement())
  organisation_id Int
  code            String         @unique @db.VarChar(20)
  name            String         @db.VarChar(100)
  description     String?
  amount          Decimal        @db.Decimal(10, 2)
  is_active       Boolean        @default(true)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  invoice_lines   invoice_line[]
  organisation    organisation   @relation(fields: [organisation_id], references: [id])

  @@unique([organisation_id, code])
  @@index([organisation_id])
}

enum InvoicePaymentStatus {
  PENDING
  PAID
  PARTIAL
}

enum InvoiceRecordStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

model invoice {
  id               Int                   @id @default(autoincrement())
  organisation_id  Int
  patient_id       Int
  visit_id         Int?
  invoice_number   String                @unique @db.VarChar(30)
  invoice_date     DateTime              @default(now())
  due_date         DateTime?
  payment_status   InvoicePaymentStatus  @default(PENDING)
  record_status    InvoiceRecordStatus   @default(ACTIVE)
  total_amount     Decimal               @db.Decimal(12, 2)
  notes            String?
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt
  archived_at      DateTime?
  deleted_at       DateTime?
  archived_by      String?
  deleted_by       String?
  organisation     organisation          @relation(fields: [organisation_id], references: [id])
  patient          patient               @relation(fields: [patient_id], references: [id])
  visit            patient_visit?        @relation(fields: [visit_id], references: [id])
  lines            invoice_line[]
  payment_apps     payment_application[] @relation("InvoicePaymentApps")
  archived_by_user User?                @relation("ArchivedBy", fields: [archived_by], references: [id])
  deleted_by_user  User?                @relation("DeletedBy", fields: [deleted_by], references: [id])

  @@index([organisation_id])
  @@index([patient_id])
  @@index([visit_id])
  @@index([invoice_number])
  @@index([archived_by])
  @@index([deleted_by])
}

model invoice_line {
  id                  Int                   @id @default(autoincrement())
  organisation_id     Int
  invoice_id         Int
  service_id         Int
  service_name       String                 @db.VarChar(100)  // Store service name at invoice time
  service_code       String                 @db.VarChar(20)   // Store service code at invoice time
  service_description String?               // Store service description at invoice time
  description        String?
  quantity           Int                    @default(1)
  unit_price         Decimal                @db.Decimal(10, 2)
  line_total         Decimal                @db.Decimal(12, 2)
  created_at         DateTime               @default(now())
  invoice            invoice                @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  organisation       organisation           @relation(fields: [organisation_id], references: [id])
  service            service                @relation(fields: [service_id], references: [id])
  payment_apps       payment_application[]  @relation("InvoiceLinePaymentApps")

  @@index([organisation_id])
  @@index([invoice_id])
  @@index([service_id])
}

model payment {
  id              Int                   @id @default(autoincrement())
  organisation_id Int
  patient_id      Int
  receipt_number  String                @unique @db.VarChar(30)
  amount          Decimal               @db.Decimal(12, 2)
  payment_date    DateTime              @default(now())
  payment_method  PaymentMethod         @default(CASH)
  transaction_id  String?               @db.VarChar(100)
  notes           String?
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  organisation    organisation          @relation(fields: [organisation_id], references: [id])
  patient         patient               @relation(fields: [patient_id], references: [id])
  applications    payment_application[]

  @@index([organisation_id])
  @@index([patient_id])
  @@index([receipt_number])
}

model payment_application {
  id               Int           @id @default(autoincrement())
  organisation_id  Int
  payment_id       Int
  invoice_id       Int
  invoice_line_id  Int?
  amount_applied   Decimal       @db.Decimal(10, 2)
  applied_date     DateTime      @default(now())
  invoice_line     invoice_line? @relation("InvoiceLinePaymentApps", fields: [invoice_line_id], references: [id], onDelete: Cascade)
  invoice          invoice       @relation("InvoicePaymentApps", fields: [invoice_id], references: [id])
  organisation     organisation  @relation(fields: [organisation_id], references: [id])
  payment          payment       @relation(fields: [payment_id], references: [id], onDelete: Cascade)

  @@index([organisation_id])
  @@index([payment_id])
  @@index([invoice_id])
  @@index([invoice_line_id])
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  INSURANCE
  CHEQUE
  OTHER
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  RECEPTIONIST
  ACCOUNTANT
  LAB_TECHNICIAN
  PHARMACIST
  USER
}

model ShortcutReference {
  id          Int           @id @default(autoincrement())
  url         String        @db.VarChar(255)
  icon        String        @db.VarChar(50)
  title       String        @db.VarChar(100)
  subtitle    String        @db.VarChar(255)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userShortcuts UserShortcut[]

  @@index([url])
  @@index([title])
}

model UserShortcut {
  id                Int              @id @default(autoincrement())
  userId            Int              // Changed from String to Int
  shortcutId        Int
  displayOrder      Int              @default(0)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              UserInternal     @relation(fields: [userId], references: [id], onDelete: Cascade) // Changed from User to UserInternal
  shortcutReference ShortcutReference @relation(fields: [shortcutId], references: [id], onDelete: Cascade)

  @@unique([userId, shortcutId])
  @@index([userId])
  @@index([shortcutId])
}

model FAQ {
  id              Int      @id @default(autoincrement())
  question        String   @db.VarChar(500)
  answer          String   @db.Text
  category        String   @db.VarChar(100)  // e.g., "Patients", "Appointments", "Billing", etc.
  order           Int      @default(0)       // For controlling the display order
  isActive        Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

model Notification {
  id              Int           @id @default(autoincrement())
  title           String        @db.VarChar(255)
  message         String        @db.Text
  type            String        @db.VarChar(50)  // e.g., "appointment", "payment", "system", etc.
  priority        String        @db.VarChar(20)  // "high", "medium", "low"
  isGlobal        Boolean       @default(false)  // true for notifications visible to all organizations
  organisationId  Int?          // null for global notifications
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organisation    organisation? @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  readStatus      NotificationRead[]

  @@index([organisationId])
  @@index([type])
  @@index([isGlobal])
  @@index([created_at])
}

model NotificationRead {
  id              Int           @id @default(autoincrement())
  notificationId  Int
  userId          Int
  readAt          DateTime      @default(now())
  notification    Notification  @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user            UserInternal  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
  @@index([notificationId])
  @@index([userId])
  @@index([readAt])
}

enum ContactCategory {
  GENERAL
  TECHNICAL
  BILLING
  FEEDBACK
  OTHER
}

model Contact {
  id              Int            @id @default(autoincrement())
  name            String         @db.VarChar(100)
  email           String         @db.VarChar(255)
  subject         String         @db.VarChar(200)
  message         String         @db.Text
  category        ContactCategory @default(GENERAL)
  status          String         @db.VarChar(50) @default("pending")
  organisation_id Int
  user_id         Int?
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime       @default(now()) @db.Timestamptz(6)
  organisation    organisation   @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user            UserInternal?  @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([organisation_id], map: "idx_contact_organisation_id")
  @@index([status], map: "idx_contact_status")
  @@index([created_at], map: "idx_contact_created_at")
  @@index([user_id], map: "idx_contact_user_id")
}
