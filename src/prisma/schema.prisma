generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String        @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  organisationId    Int?
  organisation      organisation? @relation(fields: [organisationId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  organisationId Int?
  accounts       Account[]
  sessions       Session[]
  organisation   organisation? @relation(fields: [organisationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model patient {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(100)
  birthdate               DateTime                  @db.Date
  gender                  String                    @db.VarChar(20)
  doctor_id               Int?                      // Changed from doctor String? to doctor_id Int?
  status                  String?                   @db.VarChar(50)
  avatar                  String?                   @db.VarChar(255)
  address                 String?                   @db.VarChar(255)
  city                    String?                   @db.VarChar(100)
  phone_number            String?                   @db.VarChar(30)
  email                   String?                   @db.VarChar(100)
  emergency_contact_name  String?                   @db.VarChar(100)
  emergency_contact_phone String?                   @db.VarChar(30)
  emergency_contact_email String?                   @db.VarChar(100)
  created_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  organisation_id         Int
  lab_test_orders         lab_test_order[]
  organisation            organisation              @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  doctor                  doctor?                   @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction) // Added relation to doctor
  patient_appointments    patient_appointment[]     @relation("patient_appointment_patient_id")
  patient_measurements    patient_measurements[]
  patient_medical         patient_medical[]
  patient_medical_history patient_medical_history[]
  patient_visits          patient_visit[]
  prescriptions           prescription[]
  invoices                invoice[]
  payments                payment[]

  @@index([organisation_id], map: "idx_patient_organisation_id")
  @@index([doctor_id], map: "idx_patient_doctor_id") // Added index for doctor_id
}

model patient_measurements {
  id                       Int            @id @default(autoincrement())
  patient_id               Int
  measured_at              DateTime?      @default(now()) @db.Timestamptz(6)
  weight_kg                Float?
  height_cm                Float?
  temperature_c            Float?
  blood_pressure_systolic  Int?
  blood_pressure_diastolic Int?
  organisation_id          Int
  location                 String?        @db.VarChar(50)
  measurement_type         String?        @default("routine") @db.VarChar(50)
  notes                    String?
  oxygen_saturation        Float?
  pulse                    Int?
  respiratory_rate         Int?
  taken_by                 String?        @db.VarChar(100)
  visit_id                 Int?           @unique
  organisation             organisation   @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  patient                  patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  visit                    patient_visit? @relation(fields: [visit_id], references: [id], onDelete: Cascade)

  @@index([patient_id])
  @@index([visit_id])
  @@index([organisation_id])
  @@index([measured_at])
}

model patient_medical {
  id              Int          @id @default(autoincrement())
  patient_id      Int
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?    @default(now()) @db.Timestamptz(6)
  organisation_id Int
  organisation    organisation @relation(fields: [organisation_id], references: [id])
  patient         patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([organisation_id], map: "idx_patient_medical_organisation_id")
}

model patient_medical_history {
  id              Int          @id @default(autoincrement())
  patient_id      Int
  history_type    String?      @db.VarChar(100)
  description     String
  date_occurred   DateTime?    @db.Date
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  organisation_id Int
  organisation    organisation @relation(fields: [organisation_id], references: [id])
  patient         patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([organisation_id], map: "idx_patient_medical_history_organisation_id")
}

model doctor {
  id                  Int                   @id @default(autoincrement())
  organisation_id     Int
  name                String                @db.VarChar(255)
  specialty           String?               @db.VarChar(100)
  phone_number        String?               @db.VarChar(50)
  email               String?               @db.VarChar(255)
  status              String?               @default("enabled") @db.VarChar(50)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  clinical_exams      clinical_exam[]
  organisation        organisation          @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lab_test_orders     lab_test_order[]
  patient_appointment patient_appointment[]
  patient_visits      patient_visit[]
  prescriptions       prescription[]
  patients            patient[]             // Added relation to patients

  @@index([organisation_id], map: "idx_doctor_organisation_id")
}

model organisation {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  address                 String?
  phone_number            String?                   @db.VarChar(50)
  email                   String?                   @db.VarChar(255)
  status                  String?                   @default("enabled") @db.VarChar(50)
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  break_end_time          String?                   @db.VarChar(5)
  break_start_time        String?                   @db.VarChar(5)
  work_end_time           String?                   @db.VarChar(5)
  work_start_time         String?                   @db.VarChar(5)
  working_days            String[]                  @db.VarChar(20)
  accounts                Account[]
  users                   User[]
  userInternals           UserInternal[]
  clinical_exams          clinical_exam[]
  doctor                  doctor[]
  lab_test_orders         lab_test_order[]
  medications             medication[]
  patient                 patient[]
  patient_appointment     patient_appointment[]
  patient_measurements    patient_measurements[]
  patient_medical         patient_medical[]
  patient_medical_history patient_medical_history[]
  patient_visits          patient_visit[]
  prescriptions           prescription[]
  services                service[]
  invoices                invoice[]
  invoice_lines           invoice_line[]
  payments                payment[]
  payment_applications    payment_application[]
}

model patient_appointment {
  id               Int             @id @default(autoincrement())
  organisation_id  Int
  patient_id       Int
  doctor_id        Int?
  appointment_date DateTime        @db.Timestamp(6)
  appointment_type String?         @db.VarChar(100)
  status           String?         @default("scheduled") @db.VarChar(50)
  notes            String?
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  updated_at       DateTime?       @default(now()) @db.Timestamp(6)
  doctor           doctor?         @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organisation     organisation    @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient          patient         @relation("patient_appointment_patient_id", fields: [patient_id], references: [id], onDelete: Cascade)
  patient_visits   patient_visit[]

  @@index([doctor_id], map: "idx_patient_appointment_doctor_id")
  @@index([organisation_id], map: "idx_patient_appointment_organisation_id")
  @@index([patient_id], map: "idx_patient_appointment_patient_id")
}

model UserInternal {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  isApproved     Boolean       @default(false)
  organisationId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisation   organisation? @relation(fields: [organisationId], references: [id])
}

model patient_visit {
  id                  Int                   @id @default(autoincrement())
  appointment_id      Int?
  patient_id          Int
  doctor_id           Int?
  organisation_id     Int
  arrival_time        DateTime?
  start_time          DateTime?
  end_time            DateTime?
  status              String?               @default("completed") @db.VarChar(50)
  notes               String?
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  clinical_exams      clinical_exam[]
  lab_test_orders     lab_test_order[]
  patient_measurement patient_measurements?
  appointment         patient_appointment?  @relation(fields: [appointment_id], references: [id])
  doctor              doctor?               @relation(fields: [doctor_id], references: [id])
  organisation        organisation          @relation(fields: [organisation_id], references: [id])
  patient             patient               @relation(fields: [patient_id], references: [id])
  prescriptions       prescription[]
  invoices            invoice[]

  @@index([patient_id])
  @@index([doctor_id])
  @@index([organisation_id])
}

model clinical_exam {
  id                 Int           @id @default(autoincrement())
  visit_id           Int
  organisation_id    Int
  examiner_id        Int?
  chief_complaint    String?       @db.VarChar(1000)
  history_illness    String?       @db.VarChar(2000)
  medical_history    String?       @db.VarChar(2000)
  general_appearance String?       @db.VarChar(500)
  cardiovascular     String?       @db.VarChar(1000)
  respiratory        String?       @db.VarChar(1000)
  gastrointestinal   String?       @db.VarChar(1000)
  neurological       String?       @db.VarChar(1000)
  musculoskeletal    String?       @db.VarChar(1000)
  skin               String?       @db.VarChar(1000)
  ent                String?       @db.VarChar(1000)
  assessment         String?       @db.VarChar(2000)
  plan               String?       @db.VarChar(2000)
  created_at         DateTime?     @default(now()) @db.Timestamp(6)
  updated_at         DateTime?     @default(now()) @db.Timestamp(6)
  examiner           doctor?       @relation(fields: [examiner_id], references: [id])
  organisation       organisation  @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  visit              patient_visit @relation(fields: [visit_id], references: [id], onDelete: Cascade)

  @@index([visit_id])
  @@index([organisation_id])
  @@index([examiner_id])
}

model prescription {
  id              Int                 @id @default(autoincrement())
  visit_id        Int
  doctor_id       Int
  organisation_id Int
  patient_id      Int
  created_at      DateTime?           @default(now()) @db.Timestamp(6)
  updated_at      DateTime?           @default(now()) @db.Timestamp(6)
  notes           String?             @db.VarChar(1000)
  doctor          doctor              @relation(fields: [doctor_id], references: [id])
  organisation    organisation        @relation(fields: [organisation_id], references: [id])
  patient         patient             @relation(fields: [patient_id], references: [id])
  visit           patient_visit       @relation(fields: [visit_id], references: [id], onDelete: Cascade)
  lines           prescription_line[]

  @@index([visit_id])
  @@index([doctor_id])
  @@index([organisation_id])
  @@index([patient_id])
}

model prescription_line {
  id              Int          @id @default(autoincrement())
  prescription_id Int
  drug_name       String       @db.VarChar(255)
  dosage          String?      @db.VarChar(255)
  frequency       String?      @db.VarChar(255)
  duration        String?      @db.VarChar(255)
  instructions    String?      @db.VarChar(1000)
  prescription    prescription @relation(fields: [prescription_id], references: [id], onDelete: Cascade)

  @@index([prescription_id])
}

model medication {
  id              Int           @id @default(autoincrement())
  name            String        @unique @db.VarChar(255)
  category        String?       @db.VarChar(100)
  organisation_id Int?
  dosages         String[]      @db.VarChar(100)
  organisation    organisation? @relation(fields: [organisation_id], references: [id], onDelete: Cascade)

  @@index([organisation_id])
}

model lab_test_type {
  id                      Int              @id @default(autoincrement())
  name                    String           @unique @db.VarChar(255)
  category                String?          @db.VarChar(100)
  default_unit            String?          @db.VarChar(50)
  default_reference_range String?          @db.VarChar(100)
  created_at              DateTime?        @default(now()) @db.Timestamp(6)
  updated_at              DateTime?        @default(now()) @db.Timestamp(6)
  lab_test_orders         lab_test_order[]
}

model lab_test_order {
  id              Int            @id @default(autoincrement())
  patient_id      Int
  visit_id        Int?
  doctor_id       Int?
  test_type_id    Int
  organisation_id Int
  ordered_at      DateTime?      @default(now()) @db.Timestamp(6)
  result_value    String?        @db.VarChar(100)
  result_unit     String?        @db.VarChar(50)
  reference_range String?        @db.VarChar(100)
  status          String?        @default("pending") @db.VarChar(50)
  notes           String?
  result_flag     String?        @db.VarChar(20)
  doctor          doctor?        @relation(fields: [doctor_id], references: [id])
  organisation    organisation   @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  patient         patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  test_type       lab_test_type  @relation(fields: [test_type_id], references: [id])
  visit           patient_visit? @relation(fields: [visit_id], references: [id])

  @@index([patient_id])
  @@index([visit_id])
  @@index([doctor_id])
  @@index([test_type_id])
  @@index([organisation_id])
}

model service {
  id               Int           @id @default(autoincrement())
  organisation_id  Int
  code             String        @unique @db.VarChar(20)  // Code court pour identification
  name             String        @db.VarChar(100)
  description      String?
  amount           Decimal       @db.Decimal(10,2)
  is_active        Boolean       @default(true)          // Pour désactiver sans supprimer
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  organisation     organisation  @relation(fields: [organisation_id], references: [id])
  invoice_lines    invoice_line[]

  @@index([organisation_id])
  @@unique([organisation_id, code])  // Code unique par organisation
}

model invoice {
  id               Int           @id @default(autoincrement())
  organisation_id  Int
  patient_id       Int
  visit_id         Int?
  invoice_number   String        @unique @db.VarChar(30) // Numéro de facture unique
  invoice_date     DateTime      @default(now())
  due_date         DateTime?                            // Date d'échéance
  status           InvoiceStatus @default(PENDING)      // PENDING, PAID, PARTIAL, CANCELLED
  total_amount     Decimal       @db.Decimal(12,2)
  notes            String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  organisation     organisation  @relation(fields: [organisation_id], references: [id])
  patient          patient       @relation(fields: [patient_id], references: [id])
  visit            patient_visit? @relation(fields: [visit_id], references: [id])
  lines            invoice_line[]
  payments         payment_application[] @relation("InvoicePayments")
  payment_applications payment_application[] @relation("InvoicePaymentApplications")

  @@index([organisation_id])
  @@index([patient_id])
  @@index([visit_id])
  @@index([invoice_number])
}

model invoice_line {
  id               Int           @id @default(autoincrement())
  organisation_id  Int
  invoice_id       Int
  service_id       Int
  description      String?
  quantity         Int           @default(1)
  unit_price       Decimal       @db.Decimal(10,2)
  line_total       Decimal       @db.Decimal(12,2)
  created_at       DateTime      @default(now())

  organisation     organisation  @relation(fields: [organisation_id], references: [id])
  invoice          invoice       @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  service          service       @relation(fields: [service_id], references: [id])
  payment_apps     payment_application[] @relation("InvoiceLinePaymentApps")
  payment_applications payment_application[] @relation("InvoiceLinePaymentApplications")

  @@index([organisation_id])
  @@index([invoice_id])
  @@index([service_id])
}

model payment {
  id               Int           @id @default(autoincrement())
  organisation_id  Int
  patient_id       Int
  receipt_number   String        @unique @db.VarChar(30) // Numéro de reçu
  amount           Decimal       @db.Decimal(12,2)
  payment_date     DateTime      @default(now())
  payment_method   PaymentMethod @default(CASH)         // CASH, CARD, BANK_TRANSFER, etc.
  transaction_id   String?       @db.VarChar(100)       // Référence transaction
  notes            String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  organisation     organisation  @relation(fields: [organisation_id], references: [id])
  patient          patient       @relation(fields: [patient_id], references: [id])
  applications     payment_application[]

  @@index([organisation_id])
  @@index([patient_id])
  @@index([receipt_number])
}

model payment_application {
  id               Int           @id @default(autoincrement())
  organisation_id  Int
  payment_id       Int
  invoice_id       Int
  invoice_line_id  Int?
  amount_applied   Decimal       @db.Decimal(10,2)
  applied_date     DateTime      @default(now())

  organisation     organisation  @relation(fields: [organisation_id], references: [id])
  payment          payment       @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  invoice          invoice       @relation("InvoicePayments", fields: [invoice_id], references: [id], map: "payment_application_invoice_payments_fkey")
  invoice_payment_application invoice @relation("InvoicePaymentApplications", fields: [invoice_id], references: [id], map: "payment_application_invoice_payment_applications_fkey")
  invoice_line     invoice_line? @relation("InvoiceLinePaymentApps", fields: [invoice_line_id], references: [id], onDelete: Cascade, map: "payment_application_invoice_line_apps_fkey")
  invoice_line_payment_applications invoice_line? @relation("InvoiceLinePaymentApplications", fields: [invoice_line_id], references: [id], onDelete: Cascade, map: "payment_application_invoice_line_payment_applications_fkey")

  @@index([organisation_id])
  @@index([payment_id])
  @@index([invoice_id])
  @@index([invoice_line_id])
}

enum InvoiceStatus {
  PENDING
  PAID
  PARTIAL
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  INSURANCE
  CHEQUE
  OTHER
}
