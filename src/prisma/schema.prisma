generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String        @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  organisationId    Int?
  organisation      organisation? @relation(fields: [organisationId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  organisationId Int?
  organisation   organisation? @relation(fields: [organisationId], references: [id])
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model patient {
  id                      Int                       @id @default(autoincrement())
  organisation_id         Int
  name                    String                    @db.VarChar(100)
  birthdate               DateTime                  @db.Date
  gender                  String                    @db.VarChar(20)
  doctor                  String?                   @db.VarChar(100)
  status                  String?                   @db.VarChar(50)
  avatar                  String?                   @db.VarChar(255)
  address                 String?                   @db.VarChar(255)
  city                    String?                   @db.VarChar(100)
  phone_number            String?                   @db.VarChar(30)
  email                   String?                   @db.VarChar(100)
  emergency_contact_name  String?                   @db.VarChar(100)
  emergency_contact_phone String?                   @db.VarChar(30)
  emergency_contact_email String?                   @db.VarChar(100)
  created_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  organisation            organisation              @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient_measurements    patient_measurements[]
  patient_medical         patient_medical[]
  patient_medical_history patient_medical_history[]
  patient_appointments    patient_appointment[]     @relation("patient_appointment_patient_id")
  patient_visits          patient_visit[]
  prescriptions           prescription[]

  @@index([organisation_id], map: "idx_patient_organisation_id")
}

model patient_measurements {
  id              Int       @id @default(autoincrement())
  patient_id      Int
  visit_id        Int?      @unique // Nouveau - Lien optionnel à une visite
  organisation_id Int
  measured_at     DateTime? @default(now()) @db.Timestamptz(6)

  // ---- Données physiologiques ----
  weight_kg                Float? @db.DoublePrecision
  height_cm                Float? @db.DoublePrecision
  temperature_c            Float? @db.DoublePrecision
  blood_pressure_systolic  Int?
  blood_pressure_diastolic Int?
  pulse                    Int? // Nouveau - Pouls (bpm)
  oxygen_saturation        Float? @db.DoublePrecision // Nouveau - SpO2 (%)
  respiratory_rate         Int? // Nouveau - Fréquence respiratoire

  // ---- Métadonnées ----
  measurement_type String? @default("routine") @db.VarChar(50) // "routine", "pre_consult", "post_consult"
  taken_by         String? @db.VarChar(100) // Nom du professionnel
  location         String? @db.VarChar(50) // "Cabinet 1", "Urgence", "Domicile"
  notes            String?

  // ---- Relations ----
  patient      patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  visit        patient_visit? @relation(fields: [visit_id], references: [id], onDelete: Cascade)
  organisation organisation   @relation(fields: [organisation_id], references: [id], onDelete: Cascade)

  // ---- Index ----
  @@index([patient_id])
  @@index([visit_id]) // Index pour requêtes par visite
  @@index([organisation_id])
  @@index([measured_at]) // Pour analyses chronologiques
}

model patient_medical {
  id              Int          @id @default(autoincrement())
  patient_id      Int
  organisation_id Int
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?    @default(now()) @db.Timestamptz(6)
  patient         patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  organisation    organisation @relation(fields: [organisation_id], references: [id])

  @@index([organisation_id], map: "idx_patient_medical_organisation_id")
}

model patient_medical_history {
  id              Int          @id @default(autoincrement())
  patient_id      Int
  organisation_id Int
  history_type    String?      @db.VarChar(100)
  description     String
  date_occurred   DateTime?    @db.Date
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  patient         patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  organisation    organisation @relation(fields: [organisation_id], references: [id])

  @@index([organisation_id], map: "idx_patient_medical_history_organisation_id")
}

model doctor {
  id                  Int                   @id @default(autoincrement())
  organisation_id     Int
  name                String                @db.VarChar(255)
  specialty           String?               @db.VarChar(100)
  phone_number        String?               @db.VarChar(50)
  email               String?               @db.VarChar(255)
  status              String?               @default("enabled") @db.VarChar(50)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  organisation        organisation          @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient_appointment patient_appointment[]
  patient_visits      patient_visit[]
  clinical_exams      clinical_exam[]
  prescriptions       prescription[]

  @@index([organisation_id], map: "idx_doctor_organisation_id")
}

model organisation {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  address                 String?
  phone_number            String?                   @db.VarChar(50)
  email                   String?                   @db.VarChar(255)
  status                  String?                   @default("enabled") @db.VarChar(50)
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  doctor                  doctor[]
  patient                 patient[]
  patient_appointment     patient_appointment[]
  users                   User[]
  accounts                Account[]
  patient_measurements    patient_measurements[]
  patient_medical         patient_medical[]
  patient_medical_history patient_medical_history[]
  working_days            String[]                  @db.VarChar(20)
  work_start_time         String?                   @db.VarChar(5)
  work_end_time           String?                   @db.VarChar(5)
  break_start_time        String?                   @db.VarChar(5)
  break_end_time          String?                   @db.VarChar(5)
  userInternals           UserInternal[]
  patient_visits          patient_visit[]
  clinical_exams          clinical_exam[]
  prescriptions           prescription[]
  medications             medication[]
}

model patient_appointment {
  id               Int             @id @default(autoincrement())
  organisation_id  Int
  patient_id       Int
  doctor_id        Int?
  appointment_date DateTime        @db.Timestamp(6)
  appointment_type String?         @db.VarChar(100)
  status           String?         @default("scheduled") @db.VarChar(50)
  notes            String?
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  updated_at       DateTime?       @default(now()) @db.Timestamp(6)
  doctor           doctor?         @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organisation     organisation    @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient          patient         @relation(fields: [patient_id], references: [id], onDelete: Cascade, name: "patient_appointment_patient_id")
  patient_visits   patient_visit[]

  @@index([doctor_id], map: "idx_patient_appointment_doctor_id")
  @@index([organisation_id], map: "idx_patient_appointment_organisation_id")
  @@index([patient_id], map: "idx_patient_appointment_patient_id")
}

model UserInternal {
  userId         String        @id @default(uuid())
  name           String
  email          String        @unique
  isApproved     Boolean       @default(false)
  organisationId Int?
  organisation   organisation? @relation(fields: [organisationId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model patient_visit {
  id              Int       @id @default(autoincrement())
  appointment_id  Int? // Lien optionnel vers un rendez-vous
  patient_id      Int // Obligatoire
  doctor_id       Int? // Médecin consulté
  organisation_id Int // Obligatoire pour le multi-tenant
  arrival_time    DateTime? // Heure d'arrivée
  start_time      DateTime? // Début consultation
  end_time        DateTime? // Fin consultation
  status          String?   @default("completed") @db.VarChar(50)
  notes           String?
  created_at      DateTime? @default(now()) @db.Timestamp(6)

  // Relations
  appointment         patient_appointment?  @relation(fields: [appointment_id], references: [id])
  patient             patient               @relation(fields: [patient_id], references: [id])
  doctor              doctor?               @relation(fields: [doctor_id], references: [id])
  organisation        organisation          @relation(fields: [organisation_id], references: [id])
  patient_measurement patient_measurements?
  clinical_exams      clinical_exam[]
  prescriptions       prescription[]

  // ---- Index ----
  @@index([patient_id])
  @@index([doctor_id])
  @@index([organisation_id])
}

model clinical_exam {
  id              Int  @id @default(autoincrement())
  visit_id        Int
  organisation_id Int
  examiner_id     Int? // ID du médecin examinateur

  // ---- Anamnèse ----
  chief_complaint String? @db.VarChar(1000) // Motif de consultation
  history_illness String? @db.VarChar(2000) // Histoire de la maladie
  medical_history String? @db.VarChar(2000) // Antécédents médicaux

  // ---- Examen Systémique ----
  general_appearance String? @db.VarChar(500)
  cardiovascular     String? @db.VarChar(1000)
  respiratory        String? @db.VarChar(1000)
  gastrointestinal   String? @db.VarChar(1000)
  neurological       String? @db.VarChar(1000)
  musculoskeletal    String? @db.VarChar(1000)
  skin               String? @db.VarChar(1000)
  ent                String? @db.VarChar(1000) // ORL

  // ---- Évaluation ----
  assessment String? @db.VarChar(2000) // Impression clinique
  plan       String? @db.VarChar(2000) // Plan de traitement

  // ---- Métadonnées ----
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  // ---- Relations ----
  visit        patient_visit @relation(fields: [visit_id], references: [id], onDelete: Cascade)
  organisation organisation  @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  examiner     doctor?       @relation(fields: [examiner_id], references: [id])

  // ---- Index ----
  @@index([visit_id])
  @@index([organisation_id])
  @@index([examiner_id])
}

model prescription {
  id              Int       @id @default(autoincrement())
  visit_id        Int
  doctor_id       Int
  organisation_id Int
  patient_id      Int
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  notes           String?   @db.VarChar(1000)

  // Relations
  visit        patient_visit       @relation(fields: [visit_id], references: [id], onDelete: Cascade)
  doctor       doctor              @relation(fields: [doctor_id], references: [id])
  organisation organisation        @relation(fields: [organisation_id], references: [id])
  patient      patient             @relation(fields: [patient_id], references: [id])
  lines        prescription_line[]

  @@index([visit_id])
  @@index([doctor_id])
  @@index([organisation_id])
  @@index([patient_id])
}

model prescription_line {
  id              Int     @id @default(autoincrement())
  prescription_id Int
  drug_name       String  @db.VarChar(255)
  dosage          String? @db.VarChar(255)
  frequency       String? @db.VarChar(255)
  duration        String? @db.VarChar(255)
  instructions    String? @db.VarChar(1000)

  // Relations
  prescription prescription @relation(fields: [prescription_id], references: [id], onDelete: Cascade)

  @@index([prescription_id])
}

model medication {
  id              Int           @id @default(autoincrement())
  name            String        @unique @db.VarChar(255)
  category        String?       @db.VarChar(100)
  organisation_id Int?
  organisation    organisation? @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  dosages         String[]      @db.VarChar(100)

  @@index([organisation_id])
}
